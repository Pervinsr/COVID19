# -*- coding: utf-8 -*-
"""CoronaVirus Pandemic EDA and Forecasting

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rYdgvz0Y0mEn_9iuug905Duqp6fYAxwc

# CoronaVirus Pandemic: EDA for core pandemic metrics

This notebook is focused on

- exhaustive EDA of COVID-19 pandemic metrics
- correlation of COVID-19 pandemic metrics (confirmed, deaths, recovered) with weather parameters (to check the hypothesis of COVID-19 to be weather-sensitive, like influenza viruses)
- correlation of COVID-19 pandemic metrics (confirmed, deaths, recovered) with macroeconomic params and wealness/cultural attitude in different countries (to seee if the significant impact of culture/national economies on the coronavirus spread can be confirmed)
- Calculating the forecasts CoronaVirus spread for the next 7 calendar days
"""

!pip install pdpipe

import pandas as pd
import pdpipe as pdp
import numpy as np

from google.colab import drive
from google.colab import auth

import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

from sklearn import preprocessing
import time
from datetime import datetime

"""## Pre-processing

We will load public open data about Novel Coronavirus (COVID-19) Cases, provided by JHU CSSE (https://systems.jhu.edu/research/public-health/ncov/), as per their online repository at https://github.com/CSSEGISandData/COVID-19 (updated daily)
"""

confirmed_ts_df = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
deaths_ts_df = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
recovered_ts_df = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")

"""Now we will melt and transform the canonic time series data into a long-form dataframes"""

confirmed_ts_melted_df = confirmed_ts_df.melt(id_vars=['Province/State', 'Country/Region', 'Lat', 'Long',],
                     var_name='covid_date', value_name='confirmed').copy()

deaths_ts_melted_df = deaths_ts_df.melt(id_vars=['Province/State', 'Country/Region', 'Lat', 'Long',],
                     var_name='covid_date', value_name='deaths').copy()

recovered_ts_melted_df = recovered_ts_df.melt(id_vars=['Province/State', 'Country/Region', 'Lat', 'Long',],
                     var_name='covid_date', value_name='recovered').copy()

"""Now we will further transform the data as well as put them into the single dataframe"""

pipeline = pdp.PdPipeline([
    pdp.ApplyByCols(['covid_date'], pd.to_datetime),
    pdp.ColRename({'Country/Region': 'country_id', 'Province/State': 'state', 'Lat': 'lat', 'Long': 'long'})
])

confirmed_ts_fcg_df = pipeline.apply(confirmed_ts_melted_df).sort_values(by=['country_id', 'covid_date'])
deaths_ts_fcg_df = pipeline.apply(deaths_ts_melted_df).sort_values(by=['country_id', 'covid_date'])
recovered_ts_fcg_df = pipeline.apply(recovered_ts_melted_df).sort_values(by=['country_id', 'covid_date'])

covid_df = pd.merge(
    pd.merge(confirmed_ts_fcg_df, deaths_ts_fcg_df, on=['state', 'country_id', 'lat', 'long','covid_date']),
    recovered_ts_fcg_df, on=['state', 'country_id', 'lat', 'long','covid_date'])

covid_df.head()

"""The date range covered by the current dataset is as follows"""

covid_start_date = covid_df["covid_date"].dt.date.min()
covid_end_date = covid_df["covid_date"].dt.date.max()
print("Start Date:", covid_start_date)
print("End Date:", covid_end_date)

"""## Loading Additional Datasets"""

# This will mount the drive to this notebook
drive.mount('/content/drive')

base_dataset_folder = '/content/drive/My Drive/CoronaDatasets'

covid_containment_path = base_dataset_folder + '/covid_containment/COVID 19 Containment measures data.csv'

covid_containment_master_df = pd.read_csv(covid_containment_path)

pipeline = pdp.PdPipeline([
    pdp.ColRename({
        'ID': 'measure_id',
        'Applies To': 'applied_to',
        'Country': 'country_id', 	
        'Date Start': 'start_date',
        'Date end intended': 'end_date',
        'Description of measure implemented': 'desc',
        'Exceptions': 'exceptions',	
        'Implementing City': 'city',
        'Implementing State/Province': 'state',	
        'Keywords': 'keywords',	
        'Quantity': 'qnty',	
        'Source': 'source',	
        'Target city': 'target_city',	
        'Target country': 'target_country',
        'Target region': 'target_region',
        'Target state': 'target_state'
        }),
    pdp.ApplyByCols(['start_date'], pd.to_datetime),
    pdp.ColDrop(['measure_id','applied_to', 'end_date', 'qnty', 
                 'exceptions', 'qnty', 'target_city', 'target_country',
                 'target_region', 'target_state', 'city', 'state'])
])

covid_containment_df = pipeline.apply(covid_containment_master_df)

covid_containment_df.head(5)

"""## Global Tendencies: World (except China)"""

countries_without_china = covid_df['country_id'].unique().tolist()

countries_without_china.remove('China')

pipeline = pdp.PdPipeline([
    pdp.ValKeep(countries_without_china, columns=['country_id']),
])

total_noChina = pipeline.apply(covid_df)

confirmed_total_date_noChina = total_noChina.groupby(['covid_date']).agg({'confirmed':['sum']})
fatalities_total_date_noChina = total_noChina.groupby(['covid_date']).agg({'deaths':['sum']})
total_date_noChina = confirmed_total_date_noChina.join(fatalities_total_date_noChina)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))
total_date_noChina.plot(ax=ax1)
ax1.set_title("Global confirmed cases excluding China", size=13)
ax1.set_ylabel("Number of cases", size=13)
ax1.set_xlabel("Date", size=13)
fatalities_total_date_noChina.plot(ax=ax2, color='orange')
ax2.set_title("Global deceased cases excluding China", size=13)
ax2.set_ylabel("Number of cases", size=13)
ax2.set_xlabel("Date", size=13)

"""## Global Tendencies: China"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['China'], columns=['country_id']),
])

total_China = pipeline.apply(covid_df)

confirmed_total_date_China = total_China.groupby(['covid_date']).agg({'confirmed':['sum']})
fatalities_total_date_China = total_noChina.groupby(['covid_date']).agg({'deaths':['sum']})
total_date_China = confirmed_total_date_China.join(fatalities_total_date_China)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,5))
total_date_China.plot(ax=ax1)
ax1.set_title("China confirmed cases", size=13)
ax1.set_ylabel("Number of cases", size=13)
ax1.set_xlabel("Date", size=13)
fatalities_total_date_China.plot(ax=ax2, color='orange')
ax2.set_title("China deceased cases", size=13)
ax2.set_ylabel("Number of cases", size=13)
ax2.set_xlabel("Date", size=13)

"""## Business-Related Tendencies: Operational Markets

### Overview
"""

fcg_countries = {'Argentina': 'AR',
                 'Chile': 'CL',
                 'Colombia': 'CO',
                 'Mexico': 'MX',
                 'Nigeria': 'NG',
                 'Kenya': 'KE',
                 'Ghana': 'GH',
                 'Poland': 'PL', 
                 'United Arab Emirates': 'AE',
                 'India': 'IN',
                 'Indonesia': 'ID',
                 'Pakistan': 'PK'
                 }

pipeline = pdp.PdPipeline([
    pdp.ValKeep(fcg_countries.keys(), columns=['country_id']),
    pdp.MapColVals(['country_id'], fcg_countries)

])

covid_fcg_df = pipeline.apply(covid_df)

covid_containment_fcg_df = pipeline.apply(covid_containment_df)

covid_fcg_df.head(5)

fig = px.line(covid_fcg_df, x='covid_date', y='confirmed', color='country_id', title='Confirmed Cases of COVID-19 Evolution in the Markets')
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Confirmed Cases')
fig.show()

fig = px.line(covid_fcg_df, x='covid_date', y='deaths', color='country_id', title='Death Cases of COVID-19 Evolution in the Markets')
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Fatal Cases (Deaths)')
fig.show()

fig = px.line(covid_fcg_df, x='covid_date', y='recovered', color='country_id', title='Recovered Cases of COVID-19 Evolution in the Markets')
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Recovery Cases')
fig.show()

px.bar(covid_fcg_df[['country_id', 'confirmed', 'deaths', 'recovered']].groupby(by=['country_id'], as_index=False).max().sort_values(by='confirmed'),
       x='country_id', y='confirmed', title='Total Current COVID-19 Confirmed Cases in the Markets', )

"""### Trends in Pakistan"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['PK'], columns=['country_id']),
])

covid_containment_pk_df = pipeline.apply(covid_containment_fcg_df)

temp = pipeline.apply(covid_fcg_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Pakistan', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Log of Containment Measures in Pakistan"""

if covid_containment_pk_df.shape[0] > 0:
  display(covid_containment_pk_df)
else:
  print("No containment measures  documented by http://epidemicforecasting.org/containment")

"""### Trends in Poland"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['PL'], columns=['country_id']),
])

covid_containment_pl_df = pipeline.apply(covid_containment_fcg_df)

temp = pipeline.apply(covid_fcg_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Poland', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Log of Containment Measures in Poland"""

if covid_containment_pl_df.shape[0] > 0:
  display(covid_containment_pl_df)
else:
  print("No containment measures  documented by http://epidemicforecasting.org/containment")

"""### Trends in Chile"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['CL'], columns=['country_id']),
])

covid_containment_cl_df = pipeline.apply(covid_containment_fcg_df)

temp = pipeline.apply(covid_fcg_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Chile', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Log of Containment Measures in Chile"""

if covid_containment_cl_df.shape[0] > 0:
  display(covid_containment_cl_df)
else:
  print("No containment measures documented by http://epidemicforecasting.org/containment")

"""### Trends in Indonesia"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['ID'], columns=['country_id']),
])

covid_containment_id_df = pipeline.apply(covid_containment_fcg_df)

temp = pipeline.apply(covid_fcg_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Indonesia', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""**Note**: Indonesia is currently in the sad list of top 10 countries with the highest COVID-19-driven mortality ratio across the globe

### Log of Containment Measures in Indonesia
"""

if covid_containment_id_df.shape[0] > 0:
  display(covid_containment_id_df)
else:
  print("No containment measures documented by http://epidemicforecasting.org/containment")

"""### Trends in India"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['IN'], columns=['country_id']),
])

covid_containment_in_df = pipeline.apply(covid_containment_fcg_df)

temp = pipeline.apply(covid_fcg_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: India', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Log of Containment Activities in India"""

if covid_containment_in_df.shape[0] > 0:
  display(covid_containment_in_df)
else:
  print("No containment measures documented by http://epidemicforecasting.org/containment")

"""## Business-Related Tendencies: Key Software Development Locations"""

sd_countries = {'Germany': 'DE',
                 'Sweden': 'SE',
                 'Ukraine': 'UA'
                 }

pipeline = pdp.PdPipeline([
    pdp.ValKeep(sd_countries.keys(), columns=['country_id']),
    pdp.MapColVals(['country_id'], sd_countries)

])

#countries_without_china = covid_df['country_id'].unique().tolist()
#display(countries_without_china)

covid_sd_df = pipeline.apply(covid_df)

covid_containment_sd_df = pipeline.apply(covid_containment_df)

"""### Trends in Germany"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['DE'], columns=['country_id']),
])

covid_containment_de_df = pipeline.apply(covid_containment_sd_df)

temp = pipeline.apply(covid_sd_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Germany', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Containment measures in Germany"""

if covid_containment_de_df.shape[0] > 0:
  display(covid_containment_de_df)
else:
  print("No containment measures documented by http://epidemicforecasting.org/containment")

"""### Trends in Sweden"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['SE'], columns=['country_id']),
])

covid_containment_se_df = pipeline.apply(covid_containment_sd_df)

temp = pipeline.apply(covid_sd_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Sweden', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""### Containment Measures in Sweden"""

if covid_containment_se_df.shape[0] > 0:
  display(covid_containment_se_df)
else:
  print("No containment measures documented by http://epidemicforecasting.org/containment")

"""### Trends in Ukraine"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep(['UA'], columns=['country_id']),
])

temp = pipeline.apply(covid_sd_df)

temp = temp.groupby('covid_date')['recovered', 'deaths', 'confirmed'].sum().reset_index()
temp = temp.melt(id_vars="covid_date", value_vars=['recovered', 'deaths', 'confirmed'],
                 var_name='case', value_name='count')

fig = px.area(temp, x="covid_date", y="count", color='case',
             title='Cases over time: Ukraine', color_discrete_sequence = ['cyan', 'red', 'orange'])
fig.update_xaxes(title_text='Date')
fig.update_yaxes(title_text='Cases')
fig.show()

"""## Global insights: Mortality and Recovery Rates¶
Mortality and Recovery rates as of the last date in the time series are worth seeing as well. It might have an insight for sure.

### Mortality Rates
"""

cleaned_latest = covid_df[covid_df['covid_date'] == max(covid_df['covid_date'])]

flg = cleaned_latest.groupby('country_id')['confirmed', 'deaths', 'recovered'].sum().reset_index()

flg['mortalityRate'] = round((flg['deaths']/flg['confirmed'])*100, 2)
temp = flg[flg['confirmed']>100]
temp = temp.sort_values('mortalityRate', ascending=False)

fig = px.bar(temp.sort_values(by="mortalityRate", ascending=False)[:10][::-1],
             x = 'mortalityRate', y = 'country_id', 
             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',
             color_discrete_sequence=['darkred']
            )
fig.show()

"""* San Marino and Italy within the most brutal of them all (however, both countries are trending down by this metric, which is a good news)
* Indonesia seems to be very dangerous places to get affected in Asia.
* The drop of mortality rates in Phillipes from previous days is encouraging.
* Death tolls in Italy have stormed up very high in the past few days. It is really worrying to see Italy suffering so much.
* Netherlands, and Spain being the most notable ones too.
* France recently moved off the top 10 list (by mortality rate)

**Note**: some other countries with poor medical system and unsufficient COVID-19 test system coverage may not display truly genuine charts in this view

### Countries with Lowest Mortality Rates
"""

temp = flg[flg['confirmed']>100]
temp = temp.sort_values('mortalityRate', ascending=True)[['country_id', 'confirmed','deaths']][:16]
temp.sort_values('confirmed', ascending=False)[['country_id', 'confirmed','deaths']][:20].style.background_gradient(cmap='Blues')

"""### Recovery Rates"""

flg['recoveryRate'] = round((flg['recovered']/flg['confirmed'])*100, 2)
temp = flg[flg['confirmed']>100]
temp = temp.sort_values('recoveryRate', ascending=False)

fig = px.bar(temp.sort_values(by="recoveryRate", ascending=False)[:10][::-1],
             x = 'recoveryRate', y = 'country_id', 
             title='Recoveries per 100 Confirmed Cases', text='recoveryRate', height=800, orientation='h',
             color_discrete_sequence=['#2ca02c']
            )
fig.show()

"""* China can recover an estimated 91-92 out of every 100 that get affected. That's great and the numbers seem to increase for them everyday.
* One of the cruise ships (Diamand Princess) is also on the radar
* Bahrain as we can see are doing really well in terms of recovering.
* AE (within Operational Markets) seems to be in the relatively good shape, in terms of recovery
* Italy, Spain, US, France, UK and Germany... Where are they? Is that why they are in trouble now?

### Countries with the Worst Recovery Rates
"""

temp = flg[flg['confirmed']>100]
temp = temp.sort_values('recoveryRate', ascending=True)[['country_id', 'confirmed','recovered']][:20]
temp.sort_values('confirmed', ascending=False)[['country_id', 'confirmed','recovered']][:20].style.background_gradient(cmap='Oranges')

"""## History: How did it happen?

### Worldwide History: Confirmed Cases
"""

formated_gdf = covid_df.groupby(['covid_date', 'country_id'])['confirmed', 'deaths'].max()
formated_gdf = formated_gdf.reset_index()
formated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])
formated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m/%d/%Y')
formated_gdf['size'] = formated_gdf['confirmed'].pow(0.3)

fig = px.scatter_geo(formated_gdf, locations="country_id", locationmode='country names', 
                     color="confirmed", size='size', hover_name="country_id", 
                     range_color= [0, 1500], 
                     projection="natural earth", animation_frame="covid_date", 
                     title='COVID-19: Spread Over Time', color_continuous_scale="portland")
fig.show()

"""* At the beginning (since the end of Jan 2020 as of the earliest data available) the disease seems to be only around China and its neighboring countries.

* However it quickly spread off to Europe, Autralia and even the US which is very interesting.

* Things seemed to be in fairly good mode for European locations even in mid February 2020.

* West Asia, especially Iran and Iraq, started to catch fire at the end of February 2020, along with Italy showing signs of the dread to come. South Korea and China were peaking at that moment.

* By March 5, 2020 the situation in Europe started to go out of the control. They could've have locked down right at that moment.

* The disease has taken away Africa and Americas too by early March, with alarm bells ringing loudly for the US with just over 500 cases.

* According to the data so far, USA, UK, Spain, Italy, Germany, France and the UK are in deep trouble. Next few days are crucial for how the disease develops around the world.

### Worldwide History: Deaths over Time
"""

formated_gdf = covid_df.groupby(['covid_date', 'country_id'])['confirmed', 'deaths'].max()
formated_gdf = formated_gdf.reset_index()
formated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])
formated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m/%d/%Y')
formated_gdf['size'] = formated_gdf['deaths'].pow(0.3)

fig = px.scatter_geo(formated_gdf, locations="country_id", locationmode='country names', 
                     color="deaths", size='size', hover_name="country_id", 
                     range_color= [0, 100], 
                     projection="natural earth", animation_frame="covid_date", 
                     title='COVID-19: Deaths Over Time', color_continuous_scale="peach")

fig.show()

"""The most interesting insights here are
  

*   China's relative steadiness since March
*   Europe's severe spreads.

### Europe's History: Confirmed Cases
"""

formated_gdf = covid_df.groupby(['covid_date', 'country_id'])['confirmed', 'deaths', 'recovered'].max()
formated_gdf = formated_gdf.reset_index()
formated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])
formated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m/%d/%Y')
formated_gdf['size'] = formated_gdf['confirmed'].pow(0.3) * 5

fig = px.scatter_geo(formated_gdf, locations="country_id", locationmode='country names', 
                     color="confirmed", size='size', hover_name="country_id", 
                     range_color= [0, 5000], 
                     projection="natural earth", animation_frame="covid_date", scope="europe",
                     title='COVID-19: Spread Over Time in EUROPE', color_continuous_scale="portland", height=800)
fig.show()

"""* According to the official dataset, it looks to be France who are first affected by the virus. 
* However, the data set lacks the hidden story about the remarkable football match in Bergamo that caused much stronger spread in Italy and Spain.
* Nothing bad has happened in Europe as long as mid February. End of February, Italy inflates considerably.
* Entire West Europe overshadowed by the virus by the mid of March 2020.

### Europe's History: Fatal Cases (Deaths)
"""

formated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])
formated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m/%d/%Y')
formated_gdf['size'] = formated_gdf['deaths'].pow(0.3)

fig = px.scatter_geo(formated_gdf, locations="country_id", locationmode='country names', 
                     color="deaths", size='size', hover_name="country_id", 
                     range_color= [0, 500], 
                     projection="natural earth", animation_frame="covid_date", scope="europe",
                     title='COVID-19: Deaths Over Time in EUROPE', color_continuous_scale="peach", height=800)
fig.show()

"""* At some point in Feb 2020, most of the EU countries seemed to have no active cases (except Italy).
* However, then we observe severe spread in Italy and other EU locations 
* The possible reason was the continual active spread in Italy under the lack of locking down public events and travel ban there

### Europe's History: Recovery Cases
"""

formated_gdf['covid_date'] = pd.to_datetime(formated_gdf['covid_date'])
formated_gdf['covid_date'] = formated_gdf['covid_date'].dt.strftime('%m/%d/%Y')
formated_gdf['size'] = formated_gdf['recovered'].pow(0.3) * 3.5

fig = px.scatter_geo(formated_gdf, locations="country_id", locationmode='country names', 
                     color="recovered", size='size', hover_name="country_id", 
                     range_color= [0, 100], 
                     projection="natural earth", animation_frame="covid_date", scope="europe",
                     title='COVID-19: Recovered Cases Over Time in EUROPE', color_continuous_scale="greens", height=800)
fig.show()

"""# Feature Enrichment"""

# Basic clean-up and dates features

le = preprocessing.LabelEncoder()

covid_df_corr = covid_df.copy()
covid_df_corr['day_num'] = le.fit_transform(covid_df_corr.covid_date)
covid_df_corr['day'] = covid_df_corr['covid_date'].dt.day
covid_df_corr['month'] = covid_df_corr['covid_date'].dt.month
covid_df_corr['year'] = covid_df_corr['covid_date'].dt.year

# Fill null values given that we merged train-test datasets
covid_df_corr['state'].fillna("None", inplace=True)
covid_df_corr['confirmed'].fillna(0, inplace=True)
covid_df_corr['deaths'].fillna(0, inplace=True)
covid_df_corr['recovered'].fillna(0, inplace=True)

# lag and trend calculation
def calculate_trend(df, lag_list, column):
    for lag in lag_list:
        trend_column_lag = "Trend_" + column + "_" + str(lag)
        df[trend_column_lag] = (df[column]-df[column].shift(lag, fill_value=-999))/df[column].shift(lag, fill_value=0)
    return df


def calculate_lag(df, lag_list, column):
    for lag in lag_list:
        column_lag = "Lag_" + column + "_" + str(lag)
        df[column_lag] = df[column].shift(lag, fill_value=0)
    return df


ts = time.time()
covid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'confirmed')
covid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'deaths')
covid_df_corr = calculate_lag(covid_df_corr, range(1,7), 'recovered')
covid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'confirmed')
covid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'deaths')
covid_df_corr = calculate_trend(covid_df_corr, range(1,7), 'recovered')
covid_df_corr.replace([np.inf, -np.inf], 0, inplace=True)
covid_df_corr.fillna(0, inplace=True)
print("Time spent: ", time.time()-ts)

"""## Correlation of the basic pandemic features"""

# Booking rate correlation to COVID-19 indicators: AE perspective (other countries have too little data since COVID-19 hickup to consider for the corr analysis)
corr_transform = pdp.PdPipeline([
    pdp.ColDrop ({'state',	'country_id',	'lat',	'long',	'covid_date', 'year'})
])


data = corr_transform.apply(covid_df_corr)
corr = data.corr()

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
ax.set_title('Correlation of Basic COVID-19 Metrics')
ax

display(corr)

"""# COVID-19 and National Economies / Healthcare / Demographics / Cultural Attitudes


correlation of COVID-19 pandemic metrics (confirmed, deaths, recovered) with macroeconomic params and wealness/cultural attitude in different countries (to seee if the significant impact of culture/national economies on the coronavirus spread can be confirmed)

## COVID-19 and Population Forecast Data 2020 from Worldometers

Load Population Forecast Data 2020 from Worldometers:
"""

population_2020_path = base_dataset_folder + '/population-by-country-2020/population_by_country_2020.csv'

# Load countries data file
world_population_raw = pd.read_csv(population_2020_path)

world_population_raw.head(5)

# Prepare country name transformation
country_names = world_population_raw['Country (or dependency)'].unique().tolist()

# Create a zip object from two lists
zipbObj = zip(country_names, country_names)
 
# Create a dictionary from zip object
dictOfCountries = dict(zipbObj)

# overwrite a mapping for 'United States'
dictOfCountries['United States'] = 'US'
# Kosovo and Cruise Ship manually
dictOfCountries['Kosovo'] = 'Kosovo'
dictOfCountries['Diamond Princess'] = 'Diamond Princess'

# Add Kosovo and Cruise Ship data manually
# https://en.wikipedia.org/wiki/Demographics_of_Kosovo
# https://www.indexmundi.com/kosovo/#Demographics
# https://en.wikipedia.org/wiki/Diamond_Princess_(ship)
df1 = pd.DataFrame({'Country (or dependency)':['Kosovo','Diamond Princess'],
                        'Population (2020)':[1793000,3711],
                        'Yearly Change':[0.64,0],
                        'Net Change':[1147,0],
                        'Density (P/Km²)':[165,26],
                        'Land Area (Km²)':[10887,141],
                        'Migrants (net)':[-7340,0],
                        'Fert. Rate':[2.09,0],
                        'Med. Age':[30,62],
                        'Urban Pop %':['65%','100%'],
                        'World Share':[0.02,0.00]})
    
world_population_raw = world_population_raw.append(df1)

pipeline = pdp.PdPipeline([
    pdp.ColDrop(['Fert. Rate', 'Migrants (net)', 'Yearly Change', 'World Share']),
    pdp.ColRename({'Country (or dependency)': 'country_id', 
                   'Population (2020)': 'pop_2020', 
                   'Net Change': 'net_growth_from_2019', 
                   'Density (P/Km²)': 'pop_density',
                   'Land Area (Km²)': 'land_area',
                   'Med. Age': 'med_age',
                   'Urban Pop %': 'urban_pop_ratio'
                   }),
    pdp.MapColVals(['country_id'], dictOfCountries)
])

world_population = pipeline.apply(world_population_raw)

# Remove the % character from Urban Pop values
world_population['urban_pop_ratio'] = world_population['urban_pop_ratio'].str.rstrip('%')

# Replace Urban Pop and Med Age "N.A" by their respective modes, then transform to int
world_population.loc[world_population['urban_pop_ratio']=='N.A.', 'urban_pop_ratio'] = int(world_population.loc[world_population['urban_pop_ratio']!='N.A.', 'urban_pop_ratio'].mode()[0])
world_population['urban_pop_ratio'] = world_population['urban_pop_ratio'].astype('int16')
world_population.loc[world_population['med_age']=='N.A.', 'med_age'] = int(world_population.loc[world_population['med_age']!='N.A.', 'med_age'].mode()[0])
world_population['med_age'] = world_population['med_age'].astype('int16')

print("Cleaned country details dataset")
display(world_population)

"""Now we will merge world_population and the slice of covid_df for the latest date as well as calculate essential relative metrics"""

pipeline = pdp.PdPipeline([
    pdp.ValKeep([covid_end_date], columns = ['covid_date'])              
])
# countries_without_china, columns=['country_id']
covid_latest_date_df = pipeline.apply(covid_df)

#join
all_demo_data = covid_latest_date_df.merge(world_population, on='country_id', how='left')

pipe_calc = pdp.PdPipeline([
    pdp.ApplyToRows(lambda row: (row['deaths']/row['confirmed']), 'mortality_rate'),
    pdp.ApplyToRows(lambda row: (row['recovered']/row['confirmed']), 'recovery_rate'),
    pdp.ApplyToRows(lambda row: (row['confirmed']/row['pop_2020']), 'confirmed2pop'),
    pdp.ApplyToRows(lambda row: (row['net_growth_from_2019']/row['pop_2020']), 'pop_growth'),                 
])

# calculate ratio attributes
all_demo_data = pipe_calc.apply(all_demo_data)

display(all_demo_data)

"""Now we will prepare subset of metrics for correlation analysis"""

pipeline = pdp.PdPipeline([
    pdp.ColDrop(['state', 'country_id', 'lat', 'long', 'covid_date',
                 'confirmed',	'deaths',	'recovered',	'pop_2020',	
                 'net_growth_from_2019',
                 'land_area'])
])

all_demo_data_corr = pipeline.apply(all_demo_data)

corr = all_demo_data_corr.corr()

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
ax.set_title('Correlation of  COVID-19 Ratios with Key Demographic Indicators')
ax

display(corr)

"""The key findings are as follows

* There is a certain negative correlation between the ratio of national population growth in a country and the recovery rate from COVID-19
* COVID-19 recovery rate has a certain positive correlation with the medium age of a national population 
* COVID-19 mortality rate has a certain negative correlation with the medium age of a national population 
* % of confirmed COVID-19 cases among the national population has a certain positive correlation with the density of population and % of urban population in a country

## COVID-19 and WHO Obesity Index

Load WHO Obesity Index data
"""

who_obesity_2016_path = base_dataset_folder + '/who-obesity-by-country-2016/WHO_obesityByCountry_2016.csv'

# Load countries data file
who_obesity_raw = pd.read_csv(who_obesity_2016_path)

who_obesity_raw.head(5)

"""Now we will transform the raw obesity dataframe to prepare it to merge with  COVID-19 pandemic metrics"""

# Prepare country name transformation
country_names = who_obesity_raw['Unnamed: 0'].unique().tolist()

# Create a zip object from two lists
zipbObj = zip(country_names, country_names)
 
# Create a dictionary from zip object
dictOfCountries = dict(zipbObj)

# overwrite a mapping for the countries with different names in WHO Obesity and COVID-19 datasets
dictOfCountries['United States of America'] = 'US'
dictOfCountries['Côte d\'Ivoire'] = 'Cote d\'Ivoire'
dictOfCountries['United Kingdom of Great Britain and Northern Ireland'] = 'United Kingdom'
dictOfCountries['Republic of North Macedonia'] = 'North Macedonia'
dictOfCountries['Taiwan'] = 'Taiwan*'
dictOfCountries['Republic of Korea'] = 'Korea, South'
dictOfCountries['Congo'] = 'Congo (Brazzaville)'
dictOfCountries['Democratic Republic of the Congo'] = 'Congo (Kinshasa)'
dictOfCountries['United Republic of Tanzania'] = 'Tanzania'
dictOfCountries['Viet Nam'] = 'Vietnam'
dictOfCountries['Republic of Moldova'] = 'Moldova'
dictOfCountries['Iran (Islamic Republic of)'] = 'Iran'
dictOfCountries['Brunei Darussalam'] = 'Brunei'
dictOfCountries['Russian Federation'] = 'Russia'
dictOfCountries['Venezuela (Bolivarian Republic of)'] = 'Venezuela'
dictOfCountries['Bolivia (Plurinational State of)'] = 'Bolivia'
dictOfCountries['Lao People\'s Democratic Republic'] = 'Laos'
dictOfCountries['Syrian Arab Republic'] = 'Syria'
dictOfCountries['Liechtenstein'] = 'Liechtenstein'
 

pipeline = pdp.PdPipeline([
    pdp.ColRename({'Unnamed: 0': 'country_id', 
                   'Both.sexes': 'combined_obesity', 
                   'Male': 'male_obesity', 
                   'Female': 'female_obesity'}),
    pdp.MapColVals(['country_id'], dictOfCountries)
])

who_obesity_df = pipeline.apply(who_obesity_raw)

display(who_obesity_df)

"""Now we will merge *covid_latest_date_df* and the pre-processed/transformed WHO obesity dataframe"""

#join
all_obesity_data = covid_latest_date_df.merge(who_obesity_df, on='country_id', how='left')

pipe_calc = pdp.PdPipeline([
    pdp.ApplyToRows(lambda row: (row['deaths']/row['confirmed']), 'mortality_rate'),
    pdp.ApplyToRows(lambda row: (row['recovered']/row['confirmed']), 'recovery_rate'),                
])

# calculate ratio attributes
all_obesity_data = pipe_calc.apply(all_obesity_data)


all_obesity_data.head(5)

"""Now we will prepare subset of metrics for correlation analysis"""

pipeline = pdp.PdPipeline([
    pdp.ColDrop(['state', 'country_id', 'lat', 'long', 'covid_date',
                 'confirmed',	'deaths',	'recovered'])
])

all_obesity_data_corr = pipeline.apply(all_obesity_data)

corr = all_obesity_data_corr.corr()

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
ax.set_title('Correlation of COVID-19 Ratios with WHO Obesity Indicies')
ax

display(corr)

"""We find that 

* mortality rate  is not correlated with any of the obesity metrics
* recovery rare has quite strong negative correlation with *female_obesity* as well as slightly less strong negative correlation with *combined_obesity*)

## COVID-19 and WHO Overweight Index

Load WHO Overweight Index data
"""

who_overweight_2016_path = base_dataset_folder + '/who-overweight-by-country-2016/WHO_overweightByCountry_2016.csv'

# Load WHO overweight data file
who_overweight_raw = pd.read_csv(who_overweight_2016_path)

who_overweight_raw.head(5)

"""Now we will transform the raw overweight dataframe to prepare it to merge with  COVID-19 pandemic metrics"""

# Prepare country name transformation
country_names = who_overweight_raw['Unnamed: 0'].unique().tolist()

# Create a zip object from two lists
zipbObj = zip(country_names, country_names)
 
# Create a dictionary from zip object
dictOfCountries = dict(zipbObj)

# overwrite a mapping for the countries with different names in WHO Obesity and COVID-19 datasets
dictOfCountries['United States of America'] = 'US'
dictOfCountries['Côte d\'Ivoire'] = 'Cote d\'Ivoire'
dictOfCountries['United Kingdom of Great Britain and Northern Ireland'] = 'United Kingdom'
dictOfCountries['Republic of North Macedonia'] = 'North Macedonia'
dictOfCountries['Taiwan'] = 'Taiwan*'
dictOfCountries['Republic of Korea'] = 'Korea, South'
dictOfCountries['Congo'] = 'Congo (Brazzaville)'
dictOfCountries['Democratic Republic of the Congo'] = 'Congo (Kinshasa)'
dictOfCountries['United Republic of Tanzania'] = 'Tanzania'
dictOfCountries['Viet Nam'] = 'Vietnam'
dictOfCountries['Republic of Moldova'] = 'Moldova'
dictOfCountries['Iran (Islamic Republic of)'] = 'Iran'
dictOfCountries['Brunei Darussalam'] = 'Brunei'
dictOfCountries['Russian Federation'] = 'Russia'
dictOfCountries['Venezuela (Bolivarian Republic of)'] = 'Venezuela'
dictOfCountries['Bolivia (Plurinational State of)'] = 'Bolivia'
dictOfCountries['Lao People\'s Democratic Republic'] = 'Laos'
dictOfCountries['Syrian Arab Republic'] = 'Syria'
dictOfCountries['Liechtenstein'] = 'Liechtenstein'
 

pipeline = pdp.PdPipeline([
    pdp.ColRename({'Unnamed: 0': 'country_id', 
                   'Both.sexes': 'combined_overweight', 
                   'Male': 'male_overweight', 
                   'Female': 'female_overweight'}),
    pdp.MapColVals(['country_id'], dictOfCountries)
])

who_overweight_df = pipeline.apply(who_overweight_raw)

display(who_overweight_df)

"""Now we will merge *covid_latest_date_df* and the pre-processed/transformed WHO overweight dataframe"""

#join
all_overweight_data = covid_latest_date_df.merge(who_overweight_df, on='country_id', how='left')

pipe_calc = pdp.PdPipeline([
    pdp.ApplyToRows(lambda row: (row['deaths']/row['confirmed']), 'mortality_rate'),
    pdp.ApplyToRows(lambda row: (row['recovered']/row['confirmed']), 'recovery_rate'),                
])

# calculate ratio attributes
all_overweight_data = pipe_calc.apply(all_overweight_data)


all_overweight_data.head(5)

"""Now we will prepare subset of metrics for correlation analysis"""

pipeline = pdp.PdPipeline([
    pdp.ColDrop(['state', 'country_id', 'lat', 'long', 'covid_date',
                 'confirmed',	'deaths',	'recovered'])
])

all_overweight_data_corr = pipeline.apply(all_overweight_data)

corr = all_overweight_data_corr.corr()

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
ax.set_title('Correlation of COVID-19 Ratios with WHO Obesity Indicies')
ax

display(corr)

"""We find that 

* mortality rate  is not correlated with any of the overweight metrics
* recovery rare has quite strong negative correlation with *female_overweight* (as well as a moderate correlation with *combined_overweight* )

# COVID and Air Pollution Metrics

We will load air pollution data set first
"""

air_pollution_data_path = base_dataset_folder + '/pollution-by-country-for-covid19-analysis/region_pollution.csv'

# Load countries data file
air_pollution_raw = pd.read_csv(air_pollution_data_path)

air_pollution_raw.head(5)

"""Now we will transform the raw data (with the metrics of death rates due to indoor and outdoor pollution) into the format ready to merge with COVID-19 pandemic metrics"""

# Prepare country name transformation
country_names = air_pollution_raw['Region'].unique().tolist()

# Create a zip object from two lists
zipbObj = zip(country_names, country_names)
 
# Create a dictionary from zip object
dictOfCountries = dict(zipbObj)

# overwrite a mapping for the countries with different names in WHO Obesity and COVID-19 datasets
dictOfCountries['United States of America'] = 'US'

pipeline = pdp.PdPipeline([
    pdp.ColRename({'Region': 'country_id', 
                   'Outdoor Pollution (deaths per 100000)': 'outdoor_poll_death_rate', 
                   'Indoor Pollution (deaths per 100000)': 'indoor_poll_death_rate'}),
    pdp.MapColVals(['country_id'], dictOfCountries)
])

air_pollution_df = pipeline.apply(air_pollution_raw)

display(air_pollution_df)

"""Now we will merge *covid_latest_date_df* and the pre-processed/transformed pollution-driven death rates dataframe"""

#join
all_air_pollution_data = covid_latest_date_df.merge(air_pollution_df, on='country_id', how='left')

pipe_calc = pdp.PdPipeline([
    pdp.ApplyToRows(lambda row: (row['deaths']/row['confirmed']), 'mortality_rate'),
    pdp.ApplyToRows(lambda row: (row['recovered']/row['confirmed']), 'recovery_rate'),                
])

# calculate ratio attributes
all_air_pollution_data = pipe_calc.apply(all_air_pollution_data)


all_air_pollution_data.head(5)

"""Now we will prepare the subset of data for correlation analysis"""

pipeline = pdp.PdPipeline([
    pdp.ColDrop(['state', 'country_id', 'lat', 'long', 'covid_date',
                 'confirmed',	'deaths',	'recovered'])
])

all_air_pollution_data_corr = pipeline.apply(all_air_pollution_data)

corr = all_air_pollution_data_corr.corr()

ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
)
ax.set_title('Correlation of COVID-19 Ratios with WHO Obesity Indicies')
ax

display(corr)

"""We find a weird inference (most probably) - there is quite a strong correlation between *recovery_rate* and *outdoor_poll_death_rate*. It may be related to the fact of the better industrial  development of countries with higher outbound pollution-driven deaths rate (and thus their ability to better cope with COVID-91)

# COVID-19 and Weather

This section will cover the analysis of correlation of COVID-19 pandemic metrics (confirmed, deaths, recovered) with weather parameters (to check the hypothesis of COVID-19 to be weather-sensitive, like influenza viruses)

TBD

# COVID-9 Forecast: Confirmed and Fatal Cases in the next 7 days

TBD

# Data Sources



1.   JHU CoronaVirus Dataset: https://github.com/CSSEGISandData/COVID-19
2.   COVID-19 containment and mitigation measures (https://www.kaggle.com/paultimothymooney/covid-19-containment-and-mitigation-measures/), using data from http://epidemicforecasting.org/containment
3.   Popolation forecasts 2020 (https://www.kaggle.com/tanuprabhu/population-by-country-2020, scrapped data from https://www.worldometers.info/world-population/population-by-country/, based on the latest United Nations Population Division estimates
4.   TBD
"""